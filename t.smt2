(set-logic ALL)
(push 1)
(declare-sort GCD_s 0)
(declare-fun reset_f (GCD_s) Bool)
(declare-fun io_value1_f (GCD_s) (_ BitVec 16))
(declare-fun io_value2_f (GCD_s) (_ BitVec 16))
(declare-fun io_loadingValues_f (GCD_s) Bool)
(declare-fun x_f (GCD_s) (_ BitVec 16))
(declare-fun y_f (GCD_s) (_ BitVec 16))
(declare-fun _resetCount_f (GCD_s) Bool)
(define-fun _T_f ((state GCD_s)) Bool (bvugt (x_f state) (y_f state)))
(define-fun _x_T_f ((state GCD_s)) (_ BitVec 17) (bvsub ((_ zero_extend 1) (x_f state)) ((_ zero_extend 1) (y_f state))))
(define-fun _x_T_1_f ((state GCD_s)) (_ BitVec 16) ((_ extract 15 0) (_x_T_f state)))
(define-fun _y_T_f ((state GCD_s)) (_ BitVec 17) (bvsub ((_ zero_extend 1) (y_f state)) ((_ zero_extend 1) (x_f state))))
(define-fun _y_T_1_f ((state GCD_s)) (_ BitVec 16) ((_ extract 15 0) (_y_T_f state)))
(define-fun _GEN_0_f ((state GCD_s)) (_ BitVec 16) (ite (_T_f state) (_x_T_1_f state) (x_f state)))
(define-fun _GEN_1_f ((state GCD_s)) (_ BitVec 16) (ite (_T_f state) (y_f state) (_y_T_1_f state)))
(define-fun _T_2_f ((state GCD_s)) Bool (not (reset_f state)))
(define-fun io_outputValid_f ((state GCD_s)) Bool (= (y_f state) (_ bv0 16)))
(define-fun _T_3_f ((state GCD_s)) Bool (not (io_outputValid_f state)))
(define-fun _resetPhase_f ((state GCD_s)) Bool (not (bvuge (ite (_resetCount_f state) (_ bv1 1) (_ bv0 1)) (ite true (_ bv1 1) (_ bv0 1)))))
(define-fun io_outputGCD_f ((state GCD_s)) (_ BitVec 16) (x_f state))
(define-fun assert_f ((state GCD_s)) Bool (=> (_T_2_f state) (io_outputValid_f state)))
(define-fun _resetActive_f ((state GCD_s)) Bool (=> (_resetPhase_f state) (reset_f state)))
(define-fun x_next ((state GCD_s)) (_ BitVec 16) (ite (io_loadingValues_f state) (io_value1_f state) (_GEN_0_f state)))
(define-fun y_next ((state GCD_s)) (_ BitVec 16) (ite (io_loadingValues_f state) (io_value2_f state) (_GEN_1_f state)))
(define-fun _resetCount_next ((state GCD_s)) Bool (ite (_resetPhase_f state) (= ((_ extract 0 0) (bvadd ((_ zero_extend 1) (ite (_resetCount_f state) (_ bv1 1) (_ bv0 1))) (_ bv1 2))) (_ bv1 1)) (_resetCount_f state)))
(define-fun _resetCount_init ((state GCD_s)) Bool false)
(define-fun GCD_t ((state GCD_s) (state_n GCD_s)) Bool (and (= (x_f state_n) (x_next state)) (and (= (y_f state_n) (y_next state)) (= (_resetCount_f state_n) (_resetCount_next state)))))
(define-fun GCD_i ((state GCD_s)) Bool (= (_resetCount_f state) (_resetCount_init state)))
(define-fun GCD_a ((state GCD_s)) Bool (assert_f state))
(define-fun GCD_u ((state GCD_s)) Bool (_resetActive_f state))
(declare-fun s0 () GCD_s)
(assert (GCD_i s0))
(assert (_resetActive_f s0))
(push 1)
(assert (not (assert_f s0)))
(check-sat)
(pop 1)
(declare-fun s1 () GCD_s)
(assert (GCD_t s0 s1))
(assert (_resetActive_f s1))
(push 1)
(assert (not (assert_f s1)))
(check-sat)
(pop 1)
(declare-fun s2 () GCD_s)
(assert (GCD_t s1 s2))
(assert (_resetActive_f s2))
(push 1)
(assert (not (assert_f s2)))
(check-sat)
(pop 1)
(declare-fun s3 () GCD_s)
(assert (GCD_t s2 s3))
(assert (_resetActive_f s3))
(push 1)
(assert (not (assert_f s3)))
(check-sat)
(pop 1)
(declare-fun s4 () GCD_s)
(assert (GCD_t s3 s4))
(assert (_resetActive_f s4))
(push 1)
(assert (not (assert_f s4)))
(check-sat)
(pop 1)
(declare-fun s5 () GCD_s)
(assert (GCD_t s4 s5))
(assert (_resetActive_f s5))
(push 1)
(assert (not (assert_f s5)))
(check-sat)
(pop 1)
(declare-fun s6 () GCD_s)
(assert (GCD_t s5 s6))
(assert (_resetActive_f s6))
(push 1)
(assert (not (assert_f s6)))
(check-sat)
(pop 1)
(declare-fun s7 () GCD_s)
(assert (GCD_t s6 s7))
(pop 1)
(exit)
